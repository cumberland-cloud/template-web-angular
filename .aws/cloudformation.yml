AWSTemplateFormatVersion: '2010-09-09'

Description: "Resources for statically hosting a website through an S3 CloudFront distribution and delivering continuous updates to the static content through a CICD pipeline."

Parameters:
  applicationName:
    Type: String
    Description: Name of the web application
    Default: cumberland-cloud
  certificateArn:
    Type: String
    Description: ARN of the ACM certificate used to sign requests on the domain.
    NoEcho: true
  hostedZoneId:
    Type: "AWS::Route53::HostedZone::Id"
    Description: Physical ID of the hosted zone where the domain is being served.
    NoEcho: true
  domainName:
    Type: String
    Description: Domain name that is hosting the application

Resources:
  WebsiteBucketLogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      AccessControl: LogDeliveryWrite
      BucketName: !Sub "${applicationName}-logs"
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        BlockPublicPolicy: true
        BlockPublicAcls: true

  WebsiteBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "${applicationName}-web"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref WebsiteBucketLogs
        LogFilePrefix: 'log/'
      WebsiteConfiguration:
        IndexDocument: 'index.html'
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        BlockPublicPolicy: true
        BlockPublicAcls: true

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action: 
              - "s3:GetObject"
            Principal:
              CanonicalUser: !GetAtt WebsiteOriginAccessIdentity.S3CanonicalUserId
            Resource: !Sub '${WebsiteBucket.Arn}/*'

  WebsiteDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig: 
        Aliases: 
          - !Sub "${domainName}.cumberland-cloud.com"
        Origins: 
        - DomainName: !GetAtt WebsiteBucket.DomainName
          Id: !Ref WebsiteBucket
          S3OriginConfig:
            OriginAccessIdentity:
              !Join ['', ['origin-access-identity/cloudfront/', !Ref WebsiteOriginAccessIdentity ]]
        DefaultCacheBehavior: 
          AllowedMethods: 
          - "HEAD"
          - "GET"
          - "OPTIONS"
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: true
          Compress: false
          SmoothStreaming: false
          TargetOriginId: !Ref WebsiteBucket
          ViewerProtocolPolicy: "redirect-to-https"
        PriceClass: "PriceClass_All"
        Enabled: true
        ViewerCertificate: 
          AcmCertificateArn: !Ref certificateArn
          MinimumProtocolVersion: "TLSv1.2_2019"
          SslSupportMethod: "sni-only"
        HttpVersion: "http2"
        DefaultRootObject: 'index.html'
        IPV6Enabled: true
        Logging:
          Bucket: !GetAtt WebsiteBucketLogs.DomainName
          IncludeCookies: false
          Prefix: 'log/'
      Tags:
        - Key: "Application"
          Value: !Ref applicationName

  WebsiteOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'CloudFront Origin Access Identity for ${applicationName}.${domainName}'

  WebsiteRoute53RecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref hostedZoneId
      RecordSets:
        - Name: !Sub "${domainName}.cumberland-cloud.com"
          Type: A
          AliasTarget:
            DNSName: !GetAtt WebsiteDistribution.DomainName
            EvaluateTargetHealth: false
            # Specify Z2FDTNDATAQYW2. This is always the hosted zone ID when you create an
            # alias record that routes traffic to a CloudFront distribution.
            HostedZoneId: Z2FDTNDATAQYW2
    DependsOn:
      - WebsiteDistribution

  WebsiteRepo: 
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Sub "${applicationName}-web"
      RepositoryDescription: !Sub "A repository for the ${applicationName} application website code."
  
  CodeBuildExecutor:
    Type: AWS::IAM::Role
    Description: Role to allow the CodeBuild stage to access other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub ${applicationName}-codebuild-execution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LogPermisisons
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${applicationName}*
              - Sid: CloudFrontPermissions
                Action:
                  - cloudfront:CreateInvalidation
                Effect: Allow
                Resource: '*'
              - Sid: S3Permissions
                Action:
                  - s3:List*
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:s3:::${applicationName}*"
              - Sid: CodeBuildPermissions
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${applicationName}*"
              - Sid: CodeCommitPermissions
                Action:
                  - codecommit:GitPull
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${applicationName}*" 
              - Sid: SecretManagerPermissions
                Action:
                  - secretsmanager:GetSecretValue
                Effect: Allow
                Resource:
                  - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${applicationName}*"
      RoleName: !Sub ${applicationName}-codebuild-executor

  CodePipelineExecutor:
    Type: AWS::IAM::Role
    Description: Role to allow the CodePipeline to access to other AWS Services
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "codepipeline.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub ${applicationName}-codepipeline-role-policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: IAMPermissions
                Action: 
                  - iam:PassRole
                Effect: Allow
                Resource: !Sub "arn:aws:iam::${AWS::AccountId}:role/${applicationName}*"
              - Sid: CloudWatchPermissions
                Action:
                  - cloudwatch:*
                Resource: "*"
                Effect: Allow
              - Sid: S3Permissions
                Action:
                  - s3:*
                Effect: Allow
                Resource: 
                  - !Sub "arn:aws:s3:::${applicationName}*"
              - Sid: CodeCommitPermissions
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetRepository
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Effect: Allow
                Resource: !Sub "arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${applicationName}-*"
              - Sid: CodeBuildPermissions
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: 
                  - !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:*/${applicationName}*"
                Effect: Allow
      RoleName: !Sub ${applicationName}-codepipeline-exector
  
  CloudWatchEventExecutor:
    Type: AWS::IAM::Role
    Properties:
      Description: !Sub Assumed role for CloudWatchEvent to invoke ${applicationName} CodePipeline
      Path: !Sub "/${applicationName}/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: 
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com            
      Policies:
        - PolicyName: !Sub "${applicationName}-cloudwatch-event-execution"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: CodePipelinePermissions
                Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${applicationName}*"
      RoleName: !Sub ${applicationName}-cloudwatch-executor
      Tags:
        - Key: Application
          Value: !Ref applicationName

  PipelineArtifacts:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: !Sub "${applicationName}-pipeline-artifacts"
      VersioningConfiguration:
        Status: Enabled

  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${applicationName}-codebuild"
      Artifacts:
        Type: CODEPIPELINE
      ServiceRole: !GetAtt CodeBuildExecutor.Arn
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
      Cache:
        Type: LOCAL
        Modes: # You can specify one or more cache mode, 
          - LOCAL_CUSTOM_CACHE
          - LOCAL_DOCKER_LAYER_CACHE
          - LOCAL_SOURCE_CACHE

  WebCommitEventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !GetAtt WebsiteRepo.Arn
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - master
      Targets:
        - Arn: !Sub "arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${applicationName}-web-pipeline"
          RoleArn: !GetAtt CloudWatchEventExecutor.Arn
          Id: !Sub ${applicationName}-web-codepipeline

  WebCICDPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${applicationName}-web-pipeline"
      RoleArn: !GetAtt CodePipelineExecutor.Arn
      ArtifactStore: 
        Type: S3 
        Location: !Ref PipelineArtifacts
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                - Name: !Sub "${applicationName}-web-source"    
              Configuration:
                RepositoryName: !GetAtt WebsiteRepo.Name
                BranchName: master
                PollForSourceChanges: false
        - Name: Build   
          Actions:
            - Name: CodeBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: !Sub "${applicationName}-web-source"
              OutputArtifacts:
                - Name: !Sub "${applicationName}-web-build"
              Configuration: 
                ProjectName: !Ref CodeBuild
                EnvironmentVariables: !Sub 
                  - '[{"name":"APPLICATION","value":"${app}","type":"PLAINTEXT"},{ "name": "AWS_ACCOUNT_ID", "value": "${id}", "type": "PLAINTEXT"}, { "name":"DISTRIBUTION_ID", "value": "${dist}", "type": "PLAINTEXT"}]'
                  - app: !Ref applicationName
                    id: !Sub ${AWS::AccountId}
                    dist: !Ref WebsiteDistribution